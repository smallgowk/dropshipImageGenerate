/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.view;

import com.api.ImgurApi;
import com.api.ImgurInfo;
import com.api.RestBase;
import com.api.dropship.DropUrlFactory;
import com.config.Configs;
import static com.config.Configs.downloadUrl;
import com.models.aliex.store.BaseStoreInfo;
import com.run.StartClientApp;
import com.interfaces.DownloadListener;
import com.controller.DownloadManager;
import com.controller.ImgurManager;
import com.controller.imgur.ImgurUtils;
import com.controller.transform.TransformToServer;
import com.models.imgur.Album;
import com.models.imgur.CreateAlbumResponse;
import com.models.imgur.ImgUrImage;
import com.models.outcome.BaseObj;
import com.models.response.ResponseObj;
import com.utils.Constants;
import com.utils.DialogUtil;
import com.utils.StringUtils;
import com.utils.TransformImageUtil;
import io.netty.util.internal.StringUtil;
import java.awt.Desktop;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;

/**
 *
 * @author Admin
 */
public class ImgUrPanel extends BasePanel {

    JFrame topFrame;
    JFileChooser chooser;
    String choosertitle;
    JPanel controls;

//    ProcessPannel processPannel;
    public ImgUrPanel() {
        initComponents();
        setTitle("DropshipToolsGenerateFile");
        setMenuActionCommand("MainHome");
        initData();

    }

    public void initData() {

        topFrame = (JFrame) SwingUtilities.getWindowAncestor(this);

//        txtFilePath.setText("" + Configs.filePath);
        
        txRefreshToken.setText("" + Configs.imgurRefreshToken);
        txClientId.setText("" + Configs.imgurClientId);
        txClientSecret.setText("" + Configs.imgurClientSecret);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        txtFilePath = new javax.swing.JTextField();
        btnBrowseProfile = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        lblProcessing = new javax.swing.JLabel();
        txAlbumName = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txRefreshToken = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        txClientId = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        txClientSecret = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Controler"));
        jPanel3.setFocusTraversalPolicyProvider(true);

        btnBrowseProfile.setText("Browse...");
        btnBrowseProfile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseProfileActionPerformed(evt);
            }
        });

        jLabel3.setText("FolderPath");

        jButton4.setText("Start");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel1.setText("Album Name");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(txAlbumName, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jLabel3)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(txtFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnBrowseProfile)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(lblProcessing, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(77, 77, 77))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBrowseProfile))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addComponent(lblProcessing, javax.swing.GroupLayout.DEFAULT_SIZE, 16, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txAlbumName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("ImgurAccount"));

        jLabel2.setText("RefreshToken");

        jButton1.setText("Save");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Save");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Save");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel4.setText("ClientId");

        jLabel5.setText("ClientSecret");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txRefreshToken, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txClientSecret, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txClientId, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txRefreshToken, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(13, 13, 13)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txClientId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addGap(10, 10, 10)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txClientSecret, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    BaseStoreInfo storePageInfo;

    public void browsePage() {

    }

    public void loadStore(BaseStoreInfo storePageInfo) {

    }

    public void startCrawl() {

    }

    public long lastLoad;
//    public int pageCount;

    public void nextPage() {

    }

    public void stopCrawl() {
//        aliexCrawlThread.stopCrawl();
    }
    
    public void closeApp() {
    }

    private boolean checkInfo() {
        BaseObj baseObj = TransformToServer.getInstance().getAccountInfoWrap();
//        ResponseObj responseObj = DropApiCall.doSendGetInfo(null);
        String url = DropUrlFactory.createAuthenUrl();
        ResponseObj responseObj = RestBase.getInstance().postForObject(url, baseObj, ResponseObj.class);

        if (responseObj == null) {
            System.out.println("Can not check info!");
            return false;
        }
        if (responseObj.getResultCode() != 1) {
            switch (responseObj.getResultCode()) {
                case Constants.ResultCode.SERIAL_INVALID:
                    DialogUtil.showInfoMessage(null, "Máy tính cài đặt không hợp lệ. Liên hệ 0972071089 để được xác thực!");
                    return false;
                case Constants.ResultCode.TIME_LIMIT:
                    DialogUtil.showInfoMessage(null, "Máy tính đã hết thời gian sử dụng. Liên hệ 0972071089 để được xử lý!");
                    return false;
                case Constants.ResultCode.PRODUCT_LIMIT:
                    DialogUtil.showInfoMessage(null, "Máy tính đã hết lưu lượng sử dụng. Liên hệ 0972071089 để được xử lý!");
                    return false;
                case Constants.ResultCode.VERSION_INVALID:
                    int option = DialogUtil.showOptionsQuestionDialog(null, null, responseObj.getMessage() != null ? responseObj.getMessage() : "Version app không hợp lệ!",
                            "Cập nhật", "Đóng");
                    if (option == 0) {

                        if (Desktop.isDesktopSupported() && Desktop.getDesktop().isSupported(Desktop.Action.BROWSE)) {
                            try {
                                Desktop.getDesktop().browse(new URI(downloadUrl));
                            } catch (IOException | URISyntaxException ex) {
                                Logger.getLogger(StartClientApp.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    }
                    return false;
                default:
                    DialogUtil.showInfoMessage(null, "Server error!. Liên hệ 0972071089 để được xử lý!");
                    return false;
            }
        }
        
        return true;
    }


    private void btnBrowseProfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseProfileActionPerformed
        // TODO add your handling code here:
        choosertitle = "Select file:";
        chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle(choosertitle);
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        //
        // disable the "All files" option.
        //
        chooser.setAcceptAllFileFilterUsed(false);
        //
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            String path = chooser.getSelectedFile().getPath();
//            Configs.changeFilePath(path);
            txtFilePath.setText(path);
        } else {
            System.out.println("No Selection ");
        }
    }//GEN-LAST:event_btnBrowseProfileActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String refreshToken = txRefreshToken.getText();
        if (!StringUtils.isEmpty(refreshToken)) {
            try {
                Configs.changeRefreshToken(refreshToken);
            } catch (IOException ex) {
                Logger.getLogger(ImgUrPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        String clientId = txClientId.getText();
        if (!StringUtils.isEmpty(clientId)) {
            try {
                Configs.changeClientId(clientId);
            } catch (IOException ex) {
                Logger.getLogger(ImgUrPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        String clientSecret = txClientSecret.getText();
        if (!StringUtils.isEmpty(clientSecret)) {
            try {
                Configs.changeClientSecret(clientSecret);
            } catch (IOException ex) {
                Logger.getLogger(ImgUrPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        if (txtFilePath.getText().isEmpty()) {
            DialogUtil.showErrorMessage(topFrame, "", "Vui lòng nhập đường dẫn!");
            return;
        }
        String folderPath = txtFilePath.getText().trim();
        File folder = new File(folderPath);
        if (!folder.exists()) {
            DialogUtil.showErrorMessage(topFrame, "", "Folder không tồn tại!");
            return;
        }
        File[] listFiles = folder.listFiles();
        if (listFiles.length == 0) {
            DialogUtil.showErrorMessage(topFrame, "", "Folder trống!");
            return;
        }
        if (txRefreshToken.getText().isEmpty()) {
            DialogUtil.showErrorMessage(topFrame, "", "Vui lòng điền refreshToken!");
            return;
        }
        
        if (txClientId.getText().isEmpty()) {
            DialogUtil.showErrorMessage(topFrame, "", "Vui lòng điền clientId!");
            return;
        }
        
        if (txClientSecret.getText().isEmpty()) {
            DialogUtil.showErrorMessage(topFrame, "", "Vui lòng điền client secret!");
            return;
        }
        
        if (txAlbumName.getText().isEmpty()) {
            DialogUtil.showErrorMessage(topFrame, "", "Vui lòng điền album name!");
            return;
        }
        try {
            if (StringUtils.isEmpty(ImgurInfo.accessToken)) {
                ImgurApi.generateToken();
            }
            ArrayList<Album> listAlbums = ImgurApi.getAllAlbums();
            String albumName = txAlbumName.getText();
            Album album = ImgurUtils.findAlbum(listAlbums, albumName);
            if (album == null) {
                DialogUtil.showErrorMessage(topFrame, "", "Không tìm thấy Album");
            } else {
                System.out.println("Found: " + album.deletehash + " " + album.id + " " + album.title);
                ArrayList<ImgUrImage> listImages = ImgurApi.getImagesFromAlbums(album);
                if (listImages != null) {
                    System.out.println("Found " + (listImages.size()) + " images");
                } else {
                    DialogUtil.showErrorMessage(topFrame, "", "Album trống");
                    return;
                }
                TransformImageUtil.transformImgurToProductsFile(txtFilePath.getText(), listImages, listFiles);
            }
        } catch (IOException ex) {
            DialogUtil.showErrorMessage(topFrame, "", "Error!" + ex.toString());
            return;
        } catch (InvalidFormatException ex) {
            Logger.getLogger(ImgUrPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    public void createAlbum(String albumName) {
        try {
            ArrayList<Album> listAlbums = ImgurApi.getAllAlbums();
            Album album = ImgurUtils.findAlbum(listAlbums, albumName);
            if (album == null) {
                CreateAlbumResponse createAlbumResponse = ImgurApi.createAlbum(albumName);
                System.out.println("Created album " + albumName);
            } else {
                System.out.println("Existed album!");
            }
        } catch (IOException ex) {
            Logger.getLogger(StartClientApp.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBrowseProfile;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel lblProcessing;
    private javax.swing.JTextField txAlbumName;
    private javax.swing.JTextField txClientId;
    private javax.swing.JTextField txClientSecret;
    private javax.swing.JTextField txRefreshToken;
    private javax.swing.JTextField txtFilePath;
    // End of variables declaration//GEN-END:variables
}
