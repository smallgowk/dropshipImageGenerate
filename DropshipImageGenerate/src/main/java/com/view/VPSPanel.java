/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.view;

import com.api.RestBase;
import com.api.dropship.DropUrlFactory;
import com.config.Configs;
import static com.config.Configs.downloadUrl;
import com.models.aliex.store.BaseStoreInfo;
import com.run.StartClientApp;
import com.interfaces.DownloadListener;
import com.controller.DownloadManager;
import com.controller.transform.TransformToServer;
import com.models.outcome.BaseObj;
import com.models.response.ResponseObj;
import com.utils.Constants;
import com.utils.DialogUtil;
import com.utils.StringUtils;
import com.utils.TransformImageUtil;
import java.awt.Desktop;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;

/**
 *
 * @author Admin
 */
public class VPSPanel extends BasePanel {

    JFrame topFrame;
    JFileChooser chooser;
    String choosertitle;
    JPanel controls;

//    ProcessPannel processPannel;
    public VPSPanel() {
        initComponents();
        setTitle("DropshipToolsConvertImage");
        setMenuActionCommand("MainHome");
        initData();

    }

    public void initData() {

        topFrame = (JFrame) SwingUtilities.getWindowAncestor(this);

        txtVpsIp.setText("" + Configs.vpsIp);
        txtFilePath.setText("" + Configs.filePath);

        DownloadManager.getInstance().setListener(downloadListener);
        updateDownloadState();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        txtVpsIp = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        txtFilePath = new javax.swing.JTextField();
        btnBrowseProfile = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        btnStartCrawl = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        lblDownloadState = new javax.swing.JLabel();
        btnBrowseProfile1 = new javax.swing.JButton();
        lblProcessing = new javax.swing.JLabel();

        jPanel3.setFocusTraversalPolicyProvider(true);

        txtVpsIp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtVpsIpActionPerformed(evt);
            }
        });

        jLabel1.setText("VPS IP");

        btnBrowseProfile.setText("Browse...");
        btnBrowseProfile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseProfileActionPerformed(evt);
            }
        });

        jLabel3.setText("FilePath");

        btnStartCrawl.setText("Start");
        btnStartCrawl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartCrawlActionPerformed(evt);
            }
        });

        jLabel4.setText("Download Image: ");

        btnBrowseProfile1.setText("Save");
        btnBrowseProfile1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseProfile1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(txtVpsIp, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnBrowseProfile1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnStartCrawl, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(lblDownloadState, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnBrowseProfile))
                            .addComponent(lblProcessing, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnStartCrawl)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBrowseProfile))
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtVpsIp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBrowseProfile1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblDownloadState, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblProcessing, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(284, 284, 284))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 211, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    BaseStoreInfo storePageInfo;

    public void browsePage() {

    }

    public void loadStore(BaseStoreInfo storePageInfo) {

    }

    public void startCrawl() {

    }

    public long lastLoad;
//    public int pageCount;

    public void nextPage() {

    }

    public void stopCrawl() {
//        aliexCrawlThread.stopCrawl();
    }
    
    public void closeApp() {
    }

    private void txtVpsIpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtVpsIpActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtVpsIpActionPerformed

    private void btnStartCrawlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartCrawlActionPerformed

        if (txtFilePath.getText().isEmpty()) {
            DialogUtil.showErrorMessage(topFrame, "", "Please input file path!");
            return;
        }
        
        if (txtVpsIp.getText().isEmpty()) {
            DialogUtil.showErrorMessage(topFrame, "", "Please input vps IP!");
            return;
        }
        
        if (!checkInfo()) {
            return;
        }
        
        String path = txtFilePath.getText();
        try {
            TransformImageUtil.transformImageInProductVPS(path);
        } catch (IOException ex) {
            Logger.getLogger(VPSPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InvalidFormatException ex) {
            Logger.getLogger(VPSPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnStartCrawlActionPerformed

    private boolean checkInfo() {
        BaseObj baseObj = TransformToServer.getInstance().getAccountInfoWrap();
//        ResponseObj responseObj = DropApiCall.doSendGetInfo(null);
        String url = DropUrlFactory.createAuthenUrl();
        ResponseObj responseObj = RestBase.getInstance().postForObject(url, baseObj, ResponseObj.class);

        if (responseObj == null) {
            System.out.println("Can not check info!");
            return false;
        }
        if (responseObj.getResultCode() != 1) {
            switch (responseObj.getResultCode()) {
                case Constants.ResultCode.SERIAL_INVALID:
                    DialogUtil.showInfoMessage(null, "Máy tính cài đặt không hợp lệ. Liên hệ 0972071089 để được xác thực!");
                    return false;
                case Constants.ResultCode.TIME_LIMIT:
                    DialogUtil.showInfoMessage(null, "Máy tính đã hết thời gian sử dụng. Liên hệ 0972071089 để được xử lý!");
                    return false;
                case Constants.ResultCode.PRODUCT_LIMIT:
                    DialogUtil.showInfoMessage(null, "Máy tính đã hết lưu lượng sử dụng. Liên hệ 0972071089 để được xử lý!");
                    return false;
                case Constants.ResultCode.VERSION_INVALID:
                    int option = DialogUtil.showOptionsQuestionDialog(null, null, responseObj.getMessage() != null ? responseObj.getMessage() : "Version app không hợp lệ!",
                            "Cập nhật", "Đóng");
                    if (option == 0) {

                        if (Desktop.isDesktopSupported() && Desktop.getDesktop().isSupported(Desktop.Action.BROWSE)) {
                            try {
                                Desktop.getDesktop().browse(new URI(downloadUrl));
                            } catch (IOException | URISyntaxException ex) {
                                Logger.getLogger(StartClientApp.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    }
                    return false;
                default:
                    DialogUtil.showInfoMessage(null, "Server error!. Liên hệ 0972071089 để được xử lý!");
                    return false;
            }
        }
        
        return true;
    }
    
    DownloadListener downloadListener = new DownloadListener() {
        @Override
        public void onComplete(String key) {
            updateDownloadState();
        }
    };
    
    public void updateDownloadState() {
        if (StringUtils.isEmpty(Configs.vpsIp)) {
            lblDownloadState.setText("");
        } else {
            lblDownloadState.setText("" + DownloadManager.getInstance().getTotalComplete() + "/" + DownloadManager.getInstance().getTotalDownload());
        }
        
    }



    private void btnBrowseProfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseProfileActionPerformed
        // TODO add your handling code here:
        choosertitle = "Select file:";
        chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle(choosertitle);
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        //
        // disable the "All files" option.
        //
        chooser.setAcceptAllFileFilterUsed(false);
        //
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            String path = chooser.getSelectedFile().getPath();
            Configs.changeFilePath(path);
            txtFilePath.setText(path);
        } else {
            System.out.println("No Selection ");
        }
    }//GEN-LAST:event_btnBrowseProfileActionPerformed

    private void btnBrowseProfile1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseProfile1ActionPerformed
        // TODO add your handling code here:
        String vpsIp = txtVpsIp.getText();
        try {
            Configs.changeVpsIpConfig(vpsIp);
            txtVpsIp.setText(vpsIp);
        } catch (IOException ex) {
            Logger.getLogger(VPSPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnBrowseProfile1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBrowseProfile;
    private javax.swing.JButton btnBrowseProfile1;
    private javax.swing.JButton btnStartCrawl;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel lblDownloadState;
    private javax.swing.JLabel lblProcessing;
    private javax.swing.JTextField txtFilePath;
    private javax.swing.JTextField txtVpsIp;
    // End of variables declaration//GEN-END:variables
}
